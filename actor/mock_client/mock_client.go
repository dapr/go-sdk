// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/client.go
//
// Generated by this command:
//
//	mockgen -source ./client/client.go -destination ./actor/mock_client/mock_client.go -package mock_client
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	runtime "github.com/dapr/dapr/pkg/proto/runtime/v1"
	actor "github.com/dapr/go-sdk/actor"
	config "github.com/dapr/go-sdk/actor/config"
	client "github.com/dapr/go-sdk/client"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Decrypt mocks base method.
func (m *MockClient) Decrypt(ctx context.Context, in io.Reader, opts client.DecryptOptions) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, in, opts)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockClientMockRecorder) Decrypt(ctx, in, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockClient)(nil).Decrypt), ctx, in, opts)
}

// DeleteBulkState mocks base method.
func (m *MockClient) DeleteBulkState(ctx context.Context, storeName string, keys []string, meta map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBulkState", ctx, storeName, keys, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBulkState indicates an expected call of DeleteBulkState.
func (mr *MockClientMockRecorder) DeleteBulkState(ctx, storeName, keys, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBulkState", reflect.TypeOf((*MockClient)(nil).DeleteBulkState), ctx, storeName, keys, meta)
}

// DeleteBulkStateItems mocks base method.
func (m *MockClient) DeleteBulkStateItems(ctx context.Context, storeName string, items []*client.DeleteStateItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBulkStateItems", ctx, storeName, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBulkStateItems indicates an expected call of DeleteBulkStateItems.
func (mr *MockClientMockRecorder) DeleteBulkStateItems(ctx, storeName, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBulkStateItems", reflect.TypeOf((*MockClient)(nil).DeleteBulkStateItems), ctx, storeName, items)
}

// DeleteJobAlpha1 mocks base method.
func (m *MockClient) DeleteJobAlpha1(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobAlpha1", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobAlpha1 indicates an expected call of DeleteJobAlpha1.
func (mr *MockClientMockRecorder) DeleteJobAlpha1(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobAlpha1", reflect.TypeOf((*MockClient)(nil).DeleteJobAlpha1), ctx, name)
}

// DeleteState mocks base method.
func (m *MockClient) DeleteState(ctx context.Context, storeName, key string, meta map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteState", ctx, storeName, key, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteState indicates an expected call of DeleteState.
func (mr *MockClientMockRecorder) DeleteState(ctx, storeName, key, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteState", reflect.TypeOf((*MockClient)(nil).DeleteState), ctx, storeName, key, meta)
}

// DeleteStateWithETag mocks base method.
func (m *MockClient) DeleteStateWithETag(ctx context.Context, storeName, key string, etag *client.ETag, meta map[string]string, opts *client.StateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStateWithETag", ctx, storeName, key, etag, meta, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStateWithETag indicates an expected call of DeleteStateWithETag.
func (mr *MockClientMockRecorder) DeleteStateWithETag(ctx, storeName, key, etag, meta, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateWithETag", reflect.TypeOf((*MockClient)(nil).DeleteStateWithETag), ctx, storeName, key, etag, meta, opts)
}

// Encrypt mocks base method.
func (m *MockClient) Encrypt(ctx context.Context, in io.Reader, opts client.EncryptOptions) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", ctx, in, opts)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockClientMockRecorder) Encrypt(ctx, in, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockClient)(nil).Encrypt), ctx, in, opts)
}

// ExecuteStateTransaction mocks base method.
func (m *MockClient) ExecuteStateTransaction(ctx context.Context, storeName string, meta map[string]string, ops []*client.StateOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStateTransaction", ctx, storeName, meta, ops)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteStateTransaction indicates an expected call of ExecuteStateTransaction.
func (mr *MockClientMockRecorder) ExecuteStateTransaction(ctx, storeName, meta, ops any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStateTransaction", reflect.TypeOf((*MockClient)(nil).ExecuteStateTransaction), ctx, storeName, meta, ops)
}

// GetActorState mocks base method.
func (m *MockClient) GetActorState(ctx context.Context, req *client.GetActorStateRequest) (*client.GetActorStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorState", ctx, req)
	ret0, _ := ret[0].(*client.GetActorStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorState indicates an expected call of GetActorState.
func (mr *MockClientMockRecorder) GetActorState(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorState", reflect.TypeOf((*MockClient)(nil).GetActorState), ctx, req)
}

// GetBulkSecret mocks base method.
func (m *MockClient) GetBulkSecret(ctx context.Context, storeName string, meta map[string]string) (map[string]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBulkSecret", ctx, storeName, meta)
	ret0, _ := ret[0].(map[string]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBulkSecret indicates an expected call of GetBulkSecret.
func (mr *MockClientMockRecorder) GetBulkSecret(ctx, storeName, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBulkSecret", reflect.TypeOf((*MockClient)(nil).GetBulkSecret), ctx, storeName, meta)
}

// GetBulkState mocks base method.
func (m *MockClient) GetBulkState(ctx context.Context, storeName string, keys []string, meta map[string]string, parallelism int32) ([]*client.BulkStateItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBulkState", ctx, storeName, keys, meta, parallelism)
	ret0, _ := ret[0].([]*client.BulkStateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBulkState indicates an expected call of GetBulkState.
func (mr *MockClientMockRecorder) GetBulkState(ctx, storeName, keys, meta, parallelism any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBulkState", reflect.TypeOf((*MockClient)(nil).GetBulkState), ctx, storeName, keys, meta, parallelism)
}

// GetConfigurationItem mocks base method.
func (m *MockClient) GetConfigurationItem(ctx context.Context, storeName, key string, opts ...client.ConfigurationOpt) (*client.ConfigurationItem, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, storeName, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationItem", varargs...)
	ret0, _ := ret[0].(*client.ConfigurationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationItem indicates an expected call of GetConfigurationItem.
func (mr *MockClientMockRecorder) GetConfigurationItem(ctx, storeName, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, storeName, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationItem", reflect.TypeOf((*MockClient)(nil).GetConfigurationItem), varargs...)
}

// GetConfigurationItems mocks base method.
func (m *MockClient) GetConfigurationItems(ctx context.Context, storeName string, keys []string, opts ...client.ConfigurationOpt) (map[string]*client.ConfigurationItem, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, storeName, keys}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationItems", varargs...)
	ret0, _ := ret[0].(map[string]*client.ConfigurationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationItems indicates an expected call of GetConfigurationItems.
func (mr *MockClientMockRecorder) GetConfigurationItems(ctx, storeName, keys any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, storeName, keys}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationItems", reflect.TypeOf((*MockClient)(nil).GetConfigurationItems), varargs...)
}

// GetJobAlpha1 mocks base method.
func (m *MockClient) GetJobAlpha1(ctx context.Context, name string) (*client.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobAlpha1", ctx, name)
	ret0, _ := ret[0].(*client.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobAlpha1 indicates an expected call of GetJobAlpha1.
func (mr *MockClientMockRecorder) GetJobAlpha1(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobAlpha1", reflect.TypeOf((*MockClient)(nil).GetJobAlpha1), ctx, name)
}

// GetMetadata mocks base method.
func (m *MockClient) GetMetadata(ctx context.Context) (*client.GetMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx)
	ret0, _ := ret[0].(*client.GetMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockClientMockRecorder) GetMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockClient)(nil).GetMetadata), ctx)
}

// GetSecret mocks base method.
func (m *MockClient) GetSecret(ctx context.Context, storeName, key string, meta map[string]string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, storeName, key, meta)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClientMockRecorder) GetSecret(ctx, storeName, key, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClient)(nil).GetSecret), ctx, storeName, key, meta)
}

// GetState mocks base method.
func (m *MockClient) GetState(ctx context.Context, storeName, key string, meta map[string]string) (*client.StateItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", ctx, storeName, key, meta)
	ret0, _ := ret[0].(*client.StateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockClientMockRecorder) GetState(ctx, storeName, key, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockClient)(nil).GetState), ctx, storeName, key, meta)
}

// GetStateWithConsistency mocks base method.
func (m *MockClient) GetStateWithConsistency(ctx context.Context, storeName, key string, meta map[string]string, sc client.StateConsistency) (*client.StateItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateWithConsistency", ctx, storeName, key, meta, sc)
	ret0, _ := ret[0].(*client.StateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateWithConsistency indicates an expected call of GetStateWithConsistency.
func (mr *MockClientMockRecorder) GetStateWithConsistency(ctx, storeName, key, meta, sc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateWithConsistency", reflect.TypeOf((*MockClient)(nil).GetStateWithConsistency), ctx, storeName, key, meta, sc)
}

// GetWorkflowBeta1 mocks base method.
func (m *MockClient) GetWorkflowBeta1(ctx context.Context, req *client.GetWorkflowRequest) (*client.GetWorkflowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowBeta1", ctx, req)
	ret0, _ := ret[0].(*client.GetWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowBeta1 indicates an expected call of GetWorkflowBeta1.
func (mr *MockClientMockRecorder) GetWorkflowBeta1(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowBeta1", reflect.TypeOf((*MockClient)(nil).GetWorkflowBeta1), ctx, req)
}

// GrpcClient mocks base method.
func (m *MockClient) GrpcClient() runtime.DaprClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrpcClient")
	ret0, _ := ret[0].(runtime.DaprClient)
	return ret0
}

// GrpcClient indicates an expected call of GrpcClient.
func (mr *MockClientMockRecorder) GrpcClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcClient", reflect.TypeOf((*MockClient)(nil).GrpcClient))
}

// GrpcClientConn mocks base method.
func (m *MockClient) GrpcClientConn() *grpc.ClientConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrpcClientConn")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// GrpcClientConn indicates an expected call of GrpcClientConn.
func (mr *MockClientMockRecorder) GrpcClientConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcClientConn", reflect.TypeOf((*MockClient)(nil).GrpcClientConn))
}

// ImplActorClientStub mocks base method.
func (m *MockClient) ImplActorClientStub(actorClientStub actor.Client, opt ...config.Option) {
	m.ctrl.T.Helper()
	varargs := []any{actorClientStub}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ImplActorClientStub", varargs...)
}

// ImplActorClientStub indicates an expected call of ImplActorClientStub.
func (mr *MockClientMockRecorder) ImplActorClientStub(actorClientStub any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{actorClientStub}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImplActorClientStub", reflect.TypeOf((*MockClient)(nil).ImplActorClientStub), varargs...)
}

// InvokeActor mocks base method.
func (m *MockClient) InvokeActor(ctx context.Context, req *client.InvokeActorRequest) (*client.InvokeActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeActor", ctx, req)
	ret0, _ := ret[0].(*client.InvokeActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeActor indicates an expected call of InvokeActor.
func (mr *MockClientMockRecorder) InvokeActor(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeActor", reflect.TypeOf((*MockClient)(nil).InvokeActor), ctx, req)
}

// InvokeBinding mocks base method.
func (m *MockClient) InvokeBinding(ctx context.Context, in *client.InvokeBindingRequest) (*client.BindingEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeBinding", ctx, in)
	ret0, _ := ret[0].(*client.BindingEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeBinding indicates an expected call of InvokeBinding.
func (mr *MockClientMockRecorder) InvokeBinding(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeBinding", reflect.TypeOf((*MockClient)(nil).InvokeBinding), ctx, in)
}

// InvokeMethod mocks base method.
func (m *MockClient) InvokeMethod(ctx context.Context, appID, methodName, verb string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeMethod", ctx, appID, methodName, verb)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeMethod indicates an expected call of InvokeMethod.
func (mr *MockClientMockRecorder) InvokeMethod(ctx, appID, methodName, verb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeMethod", reflect.TypeOf((*MockClient)(nil).InvokeMethod), ctx, appID, methodName, verb)
}

// InvokeMethodWithContent mocks base method.
func (m *MockClient) InvokeMethodWithContent(ctx context.Context, appID, methodName, verb string, content *client.DataContent) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeMethodWithContent", ctx, appID, methodName, verb, content)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeMethodWithContent indicates an expected call of InvokeMethodWithContent.
func (mr *MockClientMockRecorder) InvokeMethodWithContent(ctx, appID, methodName, verb, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeMethodWithContent", reflect.TypeOf((*MockClient)(nil).InvokeMethodWithContent), ctx, appID, methodName, verb, content)
}

// InvokeMethodWithCustomContent mocks base method.
func (m *MockClient) InvokeMethodWithCustomContent(ctx context.Context, appID, methodName, verb, contentType string, content any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeMethodWithCustomContent", ctx, appID, methodName, verb, contentType, content)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeMethodWithCustomContent indicates an expected call of InvokeMethodWithCustomContent.
func (mr *MockClientMockRecorder) InvokeMethodWithCustomContent(ctx, appID, methodName, verb, contentType, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeMethodWithCustomContent", reflect.TypeOf((*MockClient)(nil).InvokeMethodWithCustomContent), ctx, appID, methodName, verb, contentType, content)
}

// InvokeOutputBinding mocks base method.
func (m *MockClient) InvokeOutputBinding(ctx context.Context, in *client.InvokeBindingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeOutputBinding", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvokeOutputBinding indicates an expected call of InvokeOutputBinding.
func (mr *MockClientMockRecorder) InvokeOutputBinding(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeOutputBinding", reflect.TypeOf((*MockClient)(nil).InvokeOutputBinding), ctx, in)
}

// PauseWorkflowBeta1 mocks base method.
func (m *MockClient) PauseWorkflowBeta1(ctx context.Context, req *client.PauseWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseWorkflowBeta1", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseWorkflowBeta1 indicates an expected call of PauseWorkflowBeta1.
func (mr *MockClientMockRecorder) PauseWorkflowBeta1(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseWorkflowBeta1", reflect.TypeOf((*MockClient)(nil).PauseWorkflowBeta1), ctx, req)
}

// PublishEvent mocks base method.
func (m *MockClient) PublishEvent(ctx context.Context, pubsubName, topicName string, data any, opts ...client.PublishEventOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pubsubName, topicName, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishEvent", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockClientMockRecorder) PublishEvent(ctx, pubsubName, topicName, data any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pubsubName, topicName, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockClient)(nil).PublishEvent), varargs...)
}

// PublishEventfromCustomContent mocks base method.
func (m *MockClient) PublishEventfromCustomContent(ctx context.Context, pubsubName, topicName string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEventfromCustomContent", ctx, pubsubName, topicName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEventfromCustomContent indicates an expected call of PublishEventfromCustomContent.
func (mr *MockClientMockRecorder) PublishEventfromCustomContent(ctx, pubsubName, topicName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventfromCustomContent", reflect.TypeOf((*MockClient)(nil).PublishEventfromCustomContent), ctx, pubsubName, topicName, data)
}

// PublishEvents mocks base method.
func (m *MockClient) PublishEvents(ctx context.Context, pubsubName, topicName string, events []any, opts ...client.PublishEventsOption) client.PublishEventsResponse {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pubsubName, topicName, events}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishEvents", varargs...)
	ret0, _ := ret[0].(client.PublishEventsResponse)
	return ret0
}

// PublishEvents indicates an expected call of PublishEvents.
func (mr *MockClientMockRecorder) PublishEvents(ctx, pubsubName, topicName, events any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pubsubName, topicName, events}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvents", reflect.TypeOf((*MockClient)(nil).PublishEvents), varargs...)
}

// PurgeWorkflowBeta1 mocks base method.
func (m *MockClient) PurgeWorkflowBeta1(ctx context.Context, req *client.PurgeWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeWorkflowBeta1", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeWorkflowBeta1 indicates an expected call of PurgeWorkflowBeta1.
func (mr *MockClientMockRecorder) PurgeWorkflowBeta1(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeWorkflowBeta1", reflect.TypeOf((*MockClient)(nil).PurgeWorkflowBeta1), ctx, req)
}

// QueryStateAlpha1 mocks base method.
func (m *MockClient) QueryStateAlpha1(ctx context.Context, storeName, query string, meta map[string]string) (*client.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStateAlpha1", ctx, storeName, query, meta)
	ret0, _ := ret[0].(*client.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStateAlpha1 indicates an expected call of QueryStateAlpha1.
func (mr *MockClientMockRecorder) QueryStateAlpha1(ctx, storeName, query, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStateAlpha1", reflect.TypeOf((*MockClient)(nil).QueryStateAlpha1), ctx, storeName, query, meta)
}

// RaiseEventWorkflowBeta1 mocks base method.
func (m *MockClient) RaiseEventWorkflowBeta1(ctx context.Context, req *client.RaiseEventWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RaiseEventWorkflowBeta1", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RaiseEventWorkflowBeta1 indicates an expected call of RaiseEventWorkflowBeta1.
func (mr *MockClientMockRecorder) RaiseEventWorkflowBeta1(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RaiseEventWorkflowBeta1", reflect.TypeOf((*MockClient)(nil).RaiseEventWorkflowBeta1), ctx, req)
}

// RegisterActorReminder mocks base method.
func (m *MockClient) RegisterActorReminder(ctx context.Context, req *client.RegisterActorReminderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterActorReminder", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterActorReminder indicates an expected call of RegisterActorReminder.
func (mr *MockClientMockRecorder) RegisterActorReminder(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterActorReminder", reflect.TypeOf((*MockClient)(nil).RegisterActorReminder), ctx, req)
}

// RegisterActorTimer mocks base method.
func (m *MockClient) RegisterActorTimer(ctx context.Context, req *client.RegisterActorTimerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterActorTimer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterActorTimer indicates an expected call of RegisterActorTimer.
func (mr *MockClientMockRecorder) RegisterActorTimer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterActorTimer", reflect.TypeOf((*MockClient)(nil).RegisterActorTimer), ctx, req)
}

// ResumeWorkflowBeta1 mocks base method.
func (m *MockClient) ResumeWorkflowBeta1(ctx context.Context, req *client.ResumeWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeWorkflowBeta1", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeWorkflowBeta1 indicates an expected call of ResumeWorkflowBeta1.
func (mr *MockClientMockRecorder) ResumeWorkflowBeta1(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeWorkflowBeta1", reflect.TypeOf((*MockClient)(nil).ResumeWorkflowBeta1), ctx, req)
}

// SaveBulkState mocks base method.
func (m *MockClient) SaveBulkState(ctx context.Context, storeName string, items ...*client.SetStateItem) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, storeName}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBulkState", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBulkState indicates an expected call of SaveBulkState.
func (mr *MockClientMockRecorder) SaveBulkState(ctx, storeName any, items ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, storeName}, items...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBulkState", reflect.TypeOf((*MockClient)(nil).SaveBulkState), varargs...)
}

// SaveState mocks base method.
func (m *MockClient) SaveState(ctx context.Context, storeName, key string, data []byte, meta map[string]string, so ...client.StateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, storeName, key, data, meta}
	for _, a := range so {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveState", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveState indicates an expected call of SaveState.
func (mr *MockClientMockRecorder) SaveState(ctx, storeName, key, data, meta any, so ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, storeName, key, data, meta}, so...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveState", reflect.TypeOf((*MockClient)(nil).SaveState), varargs...)
}

// SaveStateTransactionally mocks base method.
func (m *MockClient) SaveStateTransactionally(ctx context.Context, actorType, actorID string, operations []*client.ActorStateOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStateTransactionally", ctx, actorType, actorID, operations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStateTransactionally indicates an expected call of SaveStateTransactionally.
func (mr *MockClientMockRecorder) SaveStateTransactionally(ctx, actorType, actorID, operations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStateTransactionally", reflect.TypeOf((*MockClient)(nil).SaveStateTransactionally), ctx, actorType, actorID, operations)
}

// SaveStateWithETag mocks base method.
func (m *MockClient) SaveStateWithETag(ctx context.Context, storeName, key string, data []byte, etag string, meta map[string]string, so ...client.StateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, storeName, key, data, etag, meta}
	for _, a := range so {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveStateWithETag", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStateWithETag indicates an expected call of SaveStateWithETag.
func (mr *MockClientMockRecorder) SaveStateWithETag(ctx, storeName, key, data, etag, meta any, so ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, storeName, key, data, etag, meta}, so...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStateWithETag", reflect.TypeOf((*MockClient)(nil).SaveStateWithETag), varargs...)
}

// ScheduleJobAlpha1 mocks base method.
func (m *MockClient) ScheduleJobAlpha1(ctx context.Context, req *client.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleJobAlpha1", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleJobAlpha1 indicates an expected call of ScheduleJobAlpha1.
func (mr *MockClientMockRecorder) ScheduleJobAlpha1(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleJobAlpha1", reflect.TypeOf((*MockClient)(nil).ScheduleJobAlpha1), ctx, req)
}

// SetMetadata mocks base method.
func (m *MockClient) SetMetadata(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetadata", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetadata indicates an expected call of SetMetadata.
func (mr *MockClientMockRecorder) SetMetadata(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadata", reflect.TypeOf((*MockClient)(nil).SetMetadata), ctx, key, value)
}

// Shutdown mocks base method.
func (m *MockClient) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockClientMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockClient)(nil).Shutdown), ctx)
}

// StartWorkflowBeta1 mocks base method.
func (m *MockClient) StartWorkflowBeta1(ctx context.Context, req *client.StartWorkflowRequest) (*client.StartWorkflowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflowBeta1", ctx, req)
	ret0, _ := ret[0].(*client.StartWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkflowBeta1 indicates an expected call of StartWorkflowBeta1.
func (mr *MockClientMockRecorder) StartWorkflowBeta1(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflowBeta1", reflect.TypeOf((*MockClient)(nil).StartWorkflowBeta1), ctx, req)
}

// Subscribe mocks base method.
func (m *MockClient) Subscribe(ctx context.Context, opts client.SubscriptionOptions) (*client.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, opts)
	ret0, _ := ret[0].(*client.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockClientMockRecorder) Subscribe(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), ctx, opts)
}

// SubscribeConfigurationItems mocks base method.
func (m *MockClient) SubscribeConfigurationItems(ctx context.Context, storeName string, keys []string, handler client.ConfigurationHandleFunction, opts ...client.ConfigurationOpt) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, storeName, keys, handler}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeConfigurationItems", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeConfigurationItems indicates an expected call of SubscribeConfigurationItems.
func (mr *MockClientMockRecorder) SubscribeConfigurationItems(ctx, storeName, keys, handler any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, storeName, keys, handler}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeConfigurationItems", reflect.TypeOf((*MockClient)(nil).SubscribeConfigurationItems), varargs...)
}

// SubscribeWithHandler mocks base method.
func (m *MockClient) SubscribeWithHandler(ctx context.Context, opts client.SubscriptionOptions, handler client.SubscriptionHandleFunction) (func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeWithHandler", ctx, opts, handler)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeWithHandler indicates an expected call of SubscribeWithHandler.
func (mr *MockClientMockRecorder) SubscribeWithHandler(ctx, opts, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWithHandler", reflect.TypeOf((*MockClient)(nil).SubscribeWithHandler), ctx, opts, handler)
}

// TerminateWorkflowBeta1 mocks base method.
func (m *MockClient) TerminateWorkflowBeta1(ctx context.Context, req *client.TerminateWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateWorkflowBeta1", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateWorkflowBeta1 indicates an expected call of TerminateWorkflowBeta1.
func (mr *MockClientMockRecorder) TerminateWorkflowBeta1(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkflowBeta1", reflect.TypeOf((*MockClient)(nil).TerminateWorkflowBeta1), ctx, req)
}

// TryLockAlpha1 mocks base method.
func (m *MockClient) TryLockAlpha1(ctx context.Context, storeName string, request *client.LockRequest) (*client.LockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLockAlpha1", ctx, storeName, request)
	ret0, _ := ret[0].(*client.LockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLockAlpha1 indicates an expected call of TryLockAlpha1.
func (mr *MockClientMockRecorder) TryLockAlpha1(ctx, storeName, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLockAlpha1", reflect.TypeOf((*MockClient)(nil).TryLockAlpha1), ctx, storeName, request)
}

// UnlockAlpha1 mocks base method.
func (m *MockClient) UnlockAlpha1(ctx context.Context, storeName string, request *client.UnlockRequest) (*client.UnlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockAlpha1", ctx, storeName, request)
	ret0, _ := ret[0].(*client.UnlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockAlpha1 indicates an expected call of UnlockAlpha1.
func (mr *MockClientMockRecorder) UnlockAlpha1(ctx, storeName, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockAlpha1", reflect.TypeOf((*MockClient)(nil).UnlockAlpha1), ctx, storeName, request)
}

// UnregisterActorReminder mocks base method.
func (m *MockClient) UnregisterActorReminder(ctx context.Context, req *client.UnregisterActorReminderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterActorReminder", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterActorReminder indicates an expected call of UnregisterActorReminder.
func (mr *MockClientMockRecorder) UnregisterActorReminder(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterActorReminder", reflect.TypeOf((*MockClient)(nil).UnregisterActorReminder), ctx, req)
}

// UnregisterActorTimer mocks base method.
func (m *MockClient) UnregisterActorTimer(ctx context.Context, req *client.UnregisterActorTimerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterActorTimer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterActorTimer indicates an expected call of UnregisterActorTimer.
func (mr *MockClientMockRecorder) UnregisterActorTimer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterActorTimer", reflect.TypeOf((*MockClient)(nil).UnregisterActorTimer), ctx, req)
}

// UnsubscribeConfigurationItems mocks base method.
func (m *MockClient) UnsubscribeConfigurationItems(ctx context.Context, storeName, id string, opts ...client.ConfigurationOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, storeName, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsubscribeConfigurationItems", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeConfigurationItems indicates an expected call of UnsubscribeConfigurationItems.
func (mr *MockClientMockRecorder) UnsubscribeConfigurationItems(ctx, storeName, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, storeName, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeConfigurationItems", reflect.TypeOf((*MockClient)(nil).UnsubscribeConfigurationItems), varargs...)
}

// Wait mocks base method.
func (m *MockClient) Wait(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockClientMockRecorder) Wait(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockClient)(nil).Wait), ctx, timeout)
}

// WithAuthToken mocks base method.
func (m *MockClient) WithAuthToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithAuthToken", token)
}

// WithAuthToken indicates an expected call of WithAuthToken.
func (mr *MockClientMockRecorder) WithAuthToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAuthToken", reflect.TypeOf((*MockClient)(nil).WithAuthToken), token)
}

// WithTraceID mocks base method.
func (m *MockClient) WithTraceID(ctx context.Context, id string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTraceID", ctx, id)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithTraceID indicates an expected call of WithTraceID.
func (mr *MockClientMockRecorder) WithTraceID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTraceID", reflect.TypeOf((*MockClient)(nil).WithTraceID), ctx, id)
}
