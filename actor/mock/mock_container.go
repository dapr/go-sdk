// Code generated by MockGen. DO NOT EDIT.
// Source: ./actor/manager/container.go
//
// Generated by this command:
//
//	mockgen -source ./actor/manager/container.go -destination ./actor/mock/mock_container.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	actor "github.com/dapr/go-sdk/actor"
	error "github.com/dapr/go-sdk/actor/error"
	gomock "go.uber.org/mock/gomock"
)

// MockActorContainer is a mock of ActorContainer interface.
type MockActorContainer struct {
	ctrl     *gomock.Controller
	recorder *MockActorContainerMockRecorder
}

// MockActorContainerMockRecorder is the mock recorder for MockActorContainer.
type MockActorContainerMockRecorder struct {
	mock *MockActorContainer
}

// NewMockActorContainer creates a new mock instance.
func NewMockActorContainer(ctrl *gomock.Controller) *MockActorContainer {
	mock := &MockActorContainer{ctrl: ctrl}
	mock.recorder = &MockActorContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorContainer) EXPECT() *MockActorContainerMockRecorder {
	return m.recorder
}

// GetActor mocks base method.
func (m *MockActorContainer) GetActor() actor.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor")
	ret0, _ := ret[0].(actor.Server)
	return ret0
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorContainerMockRecorder) GetActor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActorContainer)(nil).GetActor))
}

// Invoke mocks base method.
func (m *MockActorContainer) Invoke(methodName string, param []byte) ([]reflect.Value, error.ActorErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", methodName, param)
	ret0, _ := ret[0].([]reflect.Value)
	ret1, _ := ret[1].(error.ActorErr)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockActorContainerMockRecorder) Invoke(methodName, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockActorContainer)(nil).Invoke), methodName, param)
}

// MockActorContainerContext is a mock of ActorContainerContext interface.
type MockActorContainerContext struct {
	ctrl     *gomock.Controller
	recorder *MockActorContainerContextMockRecorder
}

// MockActorContainerContextMockRecorder is the mock recorder for MockActorContainerContext.
type MockActorContainerContextMockRecorder struct {
	mock *MockActorContainerContext
}

// NewMockActorContainerContext creates a new mock instance.
func NewMockActorContainerContext(ctrl *gomock.Controller) *MockActorContainerContext {
	mock := &MockActorContainerContext{ctrl: ctrl}
	mock.recorder = &MockActorContainerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorContainerContext) EXPECT() *MockActorContainerContextMockRecorder {
	return m.recorder
}

// GetActor mocks base method.
func (m *MockActorContainerContext) GetActor() actor.ServerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor")
	ret0, _ := ret[0].(actor.ServerContext)
	return ret0
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorContainerContextMockRecorder) GetActor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActorContainerContext)(nil).GetActor))
}

// Invoke mocks base method.
func (m *MockActorContainerContext) Invoke(ctx context.Context, methodName string, param []byte) ([]reflect.Value, error.ActorErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, methodName, param)
	ret0, _ := ret[0].([]reflect.Value)
	ret1, _ := ret[1].(error.ActorErr)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockActorContainerContextMockRecorder) Invoke(ctx, methodName, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockActorContainerContext)(nil).Invoke), ctx, methodName, param)
}
