// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapr/go-sdk/actor/manager (interfaces: ActorManager)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	actor "github.com/dapr/go-sdk/actor"
	error "github.com/dapr/go-sdk/actor/error"
)

// MockActorManager is a mock of ActorManager interface.
type MockActorManager struct {
	ctrl     *gomock.Controller
	recorder *MockActorManagerMockRecorder
}

// MockActorManagerMockRecorder is the mock recorder for MockActorManager.
type MockActorManagerMockRecorder struct {
	mock *MockActorManager
}

// NewMockActorManager creates a new mock instance.
func NewMockActorManager(ctrl *gomock.Controller) *MockActorManager {
	mock := &MockActorManager{ctrl: ctrl}
	mock.recorder = &MockActorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorManager) EXPECT() *MockActorManagerMockRecorder {
	return m.recorder
}

// DetectiveActor mocks base method.
func (m *MockActorManager) DetectiveActor(arg0 string) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectiveActor", arg0)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// DetectiveActor indicates an expected call of DetectiveActor.
func (mr *MockActorManagerMockRecorder) DetectiveActor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectiveActor", reflect.TypeOf((*MockActorManager)(nil).DetectiveActor), arg0)
}

// InvokeMethod mocks base method.
func (m *MockActorManager) InvokeMethod(arg0, arg1 string, arg2 []byte) ([]byte, error.ActorErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeMethod", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error.ActorErr)
	return ret0, ret1
}

// InvokeMethod indicates an expected call of InvokeMethod.
func (mr *MockActorManagerMockRecorder) InvokeMethod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeMethod", reflect.TypeOf((*MockActorManager)(nil).InvokeMethod), arg0, arg1, arg2)
}

// InvokeReminder mocks base method.
func (m *MockActorManager) InvokeReminder(arg0, arg1 string, arg2 []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeReminder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeReminder indicates an expected call of InvokeReminder.
func (mr *MockActorManagerMockRecorder) InvokeReminder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeReminder", reflect.TypeOf((*MockActorManager)(nil).InvokeReminder), arg0, arg1, arg2)
}

// InvokeTimer mocks base method.
func (m *MockActorManager) InvokeTimer(arg0, arg1 string, arg2 []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeTimer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeTimer indicates an expected call of InvokeTimer.
func (mr *MockActorManagerMockRecorder) InvokeTimer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeTimer", reflect.TypeOf((*MockActorManager)(nil).InvokeTimer), arg0, arg1, arg2)
}

// RegisterActorImplFactory mocks base method.
func (m *MockActorManager) RegisterActorImplFactory(arg0 actor.Factory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterActorImplFactory", arg0)
}

// RegisterActorImplFactory indicates an expected call of RegisterActorImplFactory.
func (mr *MockActorManagerMockRecorder) RegisterActorImplFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterActorImplFactory", reflect.TypeOf((*MockActorManager)(nil).RegisterActorImplFactory), arg0)
}
