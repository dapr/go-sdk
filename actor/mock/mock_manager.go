// Code generated by MockGen. DO NOT EDIT.
// Source: ./actor/manager/manager.go
//
// Generated by this command:
//
//	mockgen -source ./actor/manager/manager.go -destination ./actor/mock/mock_manager.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	actor "github.com/dapr/go-sdk/actor"
	error "github.com/dapr/go-sdk/actor/error"
	gomock "go.uber.org/mock/gomock"
)

// MockActorManager is a mock of ActorManager interface.
type MockActorManager struct {
	ctrl     *gomock.Controller
	recorder *MockActorManagerMockRecorder
}

// MockActorManagerMockRecorder is the mock recorder for MockActorManager.
type MockActorManagerMockRecorder struct {
	mock *MockActorManager
}

// NewMockActorManager creates a new mock instance.
func NewMockActorManager(ctrl *gomock.Controller) *MockActorManager {
	mock := &MockActorManager{ctrl: ctrl}
	mock.recorder = &MockActorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorManager) EXPECT() *MockActorManagerMockRecorder {
	return m.recorder
}

// DeactivateActor mocks base method.
func (m *MockActorManager) DeactivateActor(actorID string) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateActor", actorID)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// DeactivateActor indicates an expected call of DeactivateActor.
func (mr *MockActorManagerMockRecorder) DeactivateActor(actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateActor", reflect.TypeOf((*MockActorManager)(nil).DeactivateActor), actorID)
}

// InvokeMethod mocks base method.
func (m *MockActorManager) InvokeMethod(actorID, methodName string, request []byte) ([]byte, error.ActorErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeMethod", actorID, methodName, request)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error.ActorErr)
	return ret0, ret1
}

// InvokeMethod indicates an expected call of InvokeMethod.
func (mr *MockActorManagerMockRecorder) InvokeMethod(actorID, methodName, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeMethod", reflect.TypeOf((*MockActorManager)(nil).InvokeMethod), actorID, methodName, request)
}

// InvokeReminder mocks base method.
func (m *MockActorManager) InvokeReminder(actorID, reminderName string, params []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeReminder", actorID, reminderName, params)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeReminder indicates an expected call of InvokeReminder.
func (mr *MockActorManagerMockRecorder) InvokeReminder(actorID, reminderName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeReminder", reflect.TypeOf((*MockActorManager)(nil).InvokeReminder), actorID, reminderName, params)
}

// InvokeTimer mocks base method.
func (m *MockActorManager) InvokeTimer(actorID, timerName string, params []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeTimer", actorID, timerName, params)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeTimer indicates an expected call of InvokeTimer.
func (mr *MockActorManagerMockRecorder) InvokeTimer(actorID, timerName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeTimer", reflect.TypeOf((*MockActorManager)(nil).InvokeTimer), actorID, timerName, params)
}

// RegisterActorImplFactory mocks base method.
func (m *MockActorManager) RegisterActorImplFactory(f actor.Factory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterActorImplFactory", f)
}

// RegisterActorImplFactory indicates an expected call of RegisterActorImplFactory.
func (mr *MockActorManagerMockRecorder) RegisterActorImplFactory(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterActorImplFactory", reflect.TypeOf((*MockActorManager)(nil).RegisterActorImplFactory), f)
}

// MockActorManagerContext is a mock of ActorManagerContext interface.
type MockActorManagerContext struct {
	ctrl     *gomock.Controller
	recorder *MockActorManagerContextMockRecorder
}

// MockActorManagerContextMockRecorder is the mock recorder for MockActorManagerContext.
type MockActorManagerContextMockRecorder struct {
	mock *MockActorManagerContext
}

// NewMockActorManagerContext creates a new mock instance.
func NewMockActorManagerContext(ctrl *gomock.Controller) *MockActorManagerContext {
	mock := &MockActorManagerContext{ctrl: ctrl}
	mock.recorder = &MockActorManagerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorManagerContext) EXPECT() *MockActorManagerContextMockRecorder {
	return m.recorder
}

// DeactivateActor mocks base method.
func (m *MockActorManagerContext) DeactivateActor(ctx context.Context, actorID string) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateActor", ctx, actorID)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// DeactivateActor indicates an expected call of DeactivateActor.
func (mr *MockActorManagerContextMockRecorder) DeactivateActor(ctx, actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateActor", reflect.TypeOf((*MockActorManagerContext)(nil).DeactivateActor), ctx, actorID)
}

// InvokeMethod mocks base method.
func (m *MockActorManagerContext) InvokeMethod(ctx context.Context, actorID, methodName string, request []byte) ([]byte, error.ActorErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeMethod", ctx, actorID, methodName, request)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error.ActorErr)
	return ret0, ret1
}

// InvokeMethod indicates an expected call of InvokeMethod.
func (mr *MockActorManagerContextMockRecorder) InvokeMethod(ctx, actorID, methodName, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeMethod", reflect.TypeOf((*MockActorManagerContext)(nil).InvokeMethod), ctx, actorID, methodName, request)
}

// InvokeReminder mocks base method.
func (m *MockActorManagerContext) InvokeReminder(ctx context.Context, actorID, reminderName string, params []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeReminder", ctx, actorID, reminderName, params)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeReminder indicates an expected call of InvokeReminder.
func (mr *MockActorManagerContextMockRecorder) InvokeReminder(ctx, actorID, reminderName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeReminder", reflect.TypeOf((*MockActorManagerContext)(nil).InvokeReminder), ctx, actorID, reminderName, params)
}

// InvokeTimer mocks base method.
func (m *MockActorManagerContext) InvokeTimer(ctx context.Context, actorID, timerName string, params []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeTimer", ctx, actorID, timerName, params)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeTimer indicates an expected call of InvokeTimer.
func (mr *MockActorManagerContextMockRecorder) InvokeTimer(ctx, actorID, timerName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeTimer", reflect.TypeOf((*MockActorManagerContext)(nil).InvokeTimer), ctx, actorID, timerName, params)
}

// RegisterActorImplFactory mocks base method.
func (m *MockActorManagerContext) RegisterActorImplFactory(f actor.FactoryContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterActorImplFactory", f)
}

// RegisterActorImplFactory indicates an expected call of RegisterActorImplFactory.
func (mr *MockActorManagerContextMockRecorder) RegisterActorImplFactory(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterActorImplFactory", reflect.TypeOf((*MockActorManagerContext)(nil).RegisterActorImplFactory), f)
}
